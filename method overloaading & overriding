# Method_Overloading

from multipledispatch import dispatch

@dispatch(int, int)
def product(first, second):
    result = first * second
    print(result)

@dispatch(int, int, int)
def product(first, second, third):
    result = first * second * third
    print(result)

@dispatch(float, float, float)
def product(first, second, third):
    result = first * second * third
    print(result)

# Call the product function with different arguments

product(2, 3)           # Output: 6
product(2, 3, 2)        # Output: 12
product(2.2, 3.4, 2.3)  # Output: 17.985999999999997


# pip3 install multipledispatch #



# Method_Overriding

class Animal:
    def make_sound(self):
        pass

class Dog(Animal):
    def make_sound(self):
        return "Woof!"

class Cat(Animal):
    def make_sound(self):
        return "Meow!"

# Demonstrating run-time polymorphism
def animal_sound(animal):
    return animal.make_sound()

dog_instance = Dog()
cat_instance = Cat()

print(animal_sound(dog_instance))  # Output: Woof!
print(animal_sound(cat_instance))  # Output: Meow!

